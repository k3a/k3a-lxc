# K3A.me LXC Common Config
#
# Basic include file
#
# - updated YMD: 2018/08/01

# [[-- Basic Config

# start with common defaults
lxc.include = /usr/share/lxc/config/common.conf

# ArchLinux uses 6 ttys by default
lxc.tty.max = 6

# our only supported cpu arch
lxc.arch = x86_64



# [[-- Block and Character Devices
# (https://www.kernel.org/doc/Documentation/admin-guide/devices.txt)

# first remove the default 'a *:* rwm' entry
lxc.cgroup.devices.deny = a

# Allow any mknod (but not reading/writing the node)
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m

# basic devices which also systemd whitelists 
# (see auto_devices at https://github.com/systemd/systemd/blob/master/src/core/cgroup.c)

lxc.cgroup.devices.allow = c 1:3 rwm	# /dev/null
lxc.cgroup.devices.allow = c 1:5 rwm	# /dev/zero
lxc.cgroup.devices.allow = c 1:7 rwm	# /dev/full (always full device)
lxc.cgroup.devices.allow = c 1:8 rwm	# /dev/random (true random)
lxc.cgroup.devices.allow = c 1:9 rwm	# /dev/urandom (pseudo random)
lxc.cgroup.devices.allow = c 5:0 rwm	# /dev/tty (hw terminals/teletype)
lxc.cgroup.devices.allow = c 5:2 rwm	# /dev/ptmx (multiplexing master to create pts)

# additional common and safe devices
lxc.cgroup.devices.allow = c 5:1 rwm	# /dev/console (System Administrator console)
lxc.cgroup.devices.allow = c 136:* rwm	# /dev/pts/* (pseudo-terminals)
lxc.cgroup.devices.allow = c 10:229 rwm	# /dev/fuse (Filesystem in Userspace)

# systemd uses these for mapping InaccessiblePaths
lxc.cgroup.devices.allow = c 0:0 rwm # /run/systemd/inaccessible/chr
lxc.cgroup.devices.allow = b 0:0 rwm # /run/systemd/inaccessible/blk

# Docker requires these to implement virtual netrowk devices
lxc.cgroup.devices.allow = c 10:200 rwm	# /dev/net/tun (TAP/TUN network device)



# [[-- Capabilities

# switch to a whitelisting instead of dropping
lxc.cap.drop =
lxc.cap.keep =

# lock memory into RAM, preventing that memory from being paged 
# to the swap area (mlock(2), mlockall(2), mmap(2), shmctl(2))
# > not necessary; may be useful for some mlock-aware processes 
#lxc.cap.keep = ipc_lock

# arbitrary changes to file UIDs and GIDs + kill any process
# > root and various system script often do that
lxc.cap.keep = chown kill

# Bind a socket to privileged ports (port numbers less than 1024)
# > common services listen on privileged ports (http/80, ftp/35, ftp/21, ssh/22, etc)
lxc.cap.keep = net_bind_service

# allow processes to drop caps by using CAP_SETPCAP
# > systemd uses it for dropping capabilities
lxc.cap.keep = setpcap

# to mount filesystems
# > systemd currently won't start without it (it does filesystem mounts at startup)
lxc.cap.keep = sys_admin

# "increase resource limits (see setrlimit(2)) / increasing max open fds"
# > various daemons and services need increased resource limits
lxc.cap.keep = sys_resource

# To set UID/GIG of a process 
# > mainly for making daemons dropping root and switching to an under unprivileged user
lxc.cap.keep = setuid setgid

# use RAW and PACKET sockets, bind to any address 
# > required for ping, tcpdump and iptables
lxc.cap.keep = net_raw

# allow changing root for additional security restriction
# > SSH, FTP servers and various security isolations use it
lxc.cap.keep = sys_chroot

# bypass read, write and execute file permision checks (root normally has this cap)
# > Docker and some services won't start without it
# > Getty systemd service won't be able to access tty device
lxc.cap.keep = dac_override

# Make socket broadcasts, and listen to multicasts
# > systemd-netword won't start as it requires this as ambient capabilities in its unit file
#lxc.cap.keep = net_broadcast

# FIXME: allow all capabilitites (uncomment temporary for testing only)
#lxc.cap.drop =
#lxc.cap.keep =



# [[-- Additional Security Configs

# PR_SET_NO_NEW_PRIVS (since Linux 3.5)
# "With no_new_privs set to 1, execve(2) promises not to grant privileges to do anything that 
# could not have been done without the execve(2) call (for example, rendering the set-user-ID 
# and set-group-ID permission bits, and file capabilities non-functional)
# > additional protection
lxc.no_new_privs = 1

# For complete AppArmor support we would need
# cat /sys/kernel/security/apparmor/features/mount/mask
# available in Linux >= v4.14-rc2
# Let's allow incomplete for now and let it use default
# lxc-container-default* AppArmor profiles
lxc.apparmor.allow_incomplete = 1



# [[-- Auto-Mounts

# Auto-mounts required for systemd
lxc.mount.auto =
lxc.mount.auto = cgroup:mixed:force proc:mixed sys:mixed
